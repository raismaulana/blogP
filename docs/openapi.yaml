openapi: 3.0.3
info:
  title: blogP API
  description: RESTful API blogP
  version: 0.1.0
  contact:
    name: Rais Maulana
    email: lufriraismaulana@gmail.com
    url: https://github.com/raismaulana
  license:
    name: MIT License
    url: https://raw.githubusercontent.com/raismaulana/blogP/main/LICENSE
externalDocs:
  description: Github
  url: https://github.com/raismaulana/blogP
servers:
  - url: http://localhost:{port}
    description: local (development) server
    variables:
      port:
        default: "8080"
        description: edit port with your blogP server port
paths:
  /ping:
    get:
      summary: ping server.
      description: Endpoint to check connection with server.
      responses:
        "200":
          description: Ready
          content:
            text/plain:
              schema:
                type: string
                default: Ready
  /v1/categories:
    get:
      tags:
        - /v1/categories
      summary: Returns a list of categories.
      description: Everyone can use this endpoint.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Return a JSON array of categories if success true.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/categoriesArray"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
    post:
      tags:
        - /v1/categories
      summary: Create a new category.
      description: Only super user and admin can use this endpoint.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: JSON
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  minLength: 1
                  maxLength: 50
      responses:
        "200":
          description: Success if no duplicate categoriy.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/successResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
  /v1/categories/{id_category}:
    delete:
      tags:
        - /v1/categories
      summary: Delete category.
      description: Only super user can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/categoryID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/successResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
    get:
      tags:
        - /v1/categories
      summary: Return a category.
      description: Everyone can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/categoryID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/categoriesResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
    put:
      tags:
        - /v1/categories
      summary: Create a new category.
      description: Only super user and admin can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/categoryID"
      requestBody:
        required: true
        description: JSON
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  minLength: 1
                  maxLength: 50
      responses:
        "200":
          description: Success if no duplicate categoriy.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/successResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
  /v1/posts:
    get:
      tags:
        - /v1/posts
      summary: Returns a list of posts.
      description: Everyone can use this endpoint.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Return a JSON array of posts if success true.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/postsArray"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
    post:
      tags:
        - /v1/posts
      summary: Create a new posts.
      description: Only super user and admin can use this endpoint.
      security:
        - bearerAuth: []
      requestBody:
        $ref:  "#/components/requestBodies/posts"
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/successResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
  /v1/posts/{id_post}:
    delete:
      tags:
        - /v1/posts
      summary: Delete post.
      description: Only super user and resource owner can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/postID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/successResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
    get:
      tags:
        - /v1/posts
      summary: Return a post.
      description: Everyone can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/postID"
      responses:
        "200":
          description: Post with content.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/postsDetailResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
    put:
      tags:
        - /v1/posts
      summary: Update posts.
      description: Only super user and resource owner can use this endpoint.
      security:
        - bearerAuth: []
      requestBody:
        $ref:  "#/components/requestBodies/posts"
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/successResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
  /v1/posts/slug/{slug}:
    get:
      tags:
        - /v1/posts
      summary: Return a post by slug.
      description: Everyone can use this endpoint.
      security:
        - bearerAuth: []
      requestBody:
        $ref:  "#/components/requestBodies/posts"
      responses:
        "200":
          description: Post with content.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/postsDetailResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
  /v1/tags:
    get:
      tags:
        - /v1/tags
      summary: Returns a list of tags.
      description: Everyone can use this endpoint.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Return a JSON array of tags if success true.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/tagsArray"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
    post:
      tags:
        - /v1/tags
      summary: Create a new tag.
      description: Only super user and admin can use this endpoint.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: JSON
        content:
          application/json:
            schema:
              type: object
              properties:
                tag:
                  type: string
                  minLength: 1
                  maxLength: 15
      responses:
        "200":
          description: Success if no duplicate categoriy.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/successResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
  /v1/tags/{id_tag}:
    delete:
      tags:
        - /v1/tags
      summary: Delete tag.
      description: Only super user can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/tagID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/successResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
    get:
      tags:
        - /v1/tags
      summary: Return a tag.
      description: Everyone can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/tagID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/tagsResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
    put:
      tags:
        - /v1/tags
      summary: Create a new tag.
      description: Only super user and admin can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/tagID"
      requestBody:
        required: true
        description: JSON
        content:
          application/json:
            schema:
              type: object
              properties:
                tag:
                  type: string
                  minLength: 1
                  maxLength: 15
      responses:
        "200":
          description: Success if no duplicate categoriy.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/successResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
  /v1/users:
    get:
      tags:
        - /v1/users
      summary: Returns a list of users.
      description: Everyone can use this endpoint.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Return a JSON array of users if success true.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/usersArray"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
    post:
      tags:
        - /v1/users
      summary: User registration.
      description: Only super user can use this endpoint.
      security:
        - bearerAuth: []
      requestBody:
        description: data user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 4
                  maxLength: 25
                username:
                  type: string
                  minLength: 6
                  maxLength: 12
                password:
                  type: string
                  format: password
                  minLength: 6
                  maxLength: 25
                email:
                  type: string
                  format: email
                  minLength: 5
                  maxLength: 25
                city:
                  type: string
                  minLength: 1
                  maxLength: 25
                country:
                  type: string
                  minLength: 1
                  maxLength: 25
                birthday:
                  type: string
                  description: RFC3339 datetime
                  format: date-time
                  example: "2021-08-21T00:00:00Z"
                web_profile:
                  type: string
                  default:
                  nullable: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/successResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
  /v1/users/{id_user}:
    delete:
      tags:
        - /v1/users
      summary: Delete user by id.
      description: Only super user can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/successResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
    get:
      tags:
        - /v1/users
      summary: Returns an user by id.
      description: Everyone can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userID"
      responses:
        "200":
          description: Return a JSON object of users if success true
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/usersResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
    put:
      tags:
        - /v1/users
      summary: Update user.
      description: Only super user and the owner of resource can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 4
                  maxLength: 25
                city:
                  type: string
                  minLength: 1
                  maxLength: 25
                country:
                  type: string
                  minLength: 1
                  maxLength: 25
                birthday:
                  type: string
                  format: date
                  pattern: YYYY-MM-DD
                web_profile:
                  type: string
                  default: ""
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/successResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
  /v1/users/{id_user}/activation:
    get:
      tags:
        - /v1/users
      summary: User activation
      description: Activation link from email. Everyone can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userID"
        - in: query
          name: email
          required: true
          schema:
            type: string
            minLength: 5
            maxLength: 320
        - in: query
          name: activation_code
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/successResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
  /v1/users/{id_user}/password:
    patch:
      tags:
        - /v1/users
      summary: Change user password
      description: Only super user and the owner of resouce can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userID"
      requestBody:
        description: JSON
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                new_password:
                  type: string
                  minLength: 6
                  maxLength: 25
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/successResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
  /v1/users/{id_user}/photo-profile:
    post:
      tags:
        - /v1/users
      summary: Change user photo profile
      description: Only super user and the owner of resouce can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userID"
      requestBody:
        description: multipart/form-data JPEG/JPG only
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo_profile:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/successResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
  /v1/users/{id_user}/re-activation:
    get:
      tags:
        - /v1/users
      summary: Resend activation code to email. Only super user and the owner of resouce can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/successResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
  /v1/users/auth:
    post:
      tags:
        - /v1/users
      summary: Login
      description: Return token if login success. Only guest can access this endpoint
      security:
        - bearerAuth: []
      requestBody:
        description: Login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 6
                  maxLength: 12
                password:
                  type: string
                  minLength: 6
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      success:
                        type: boolean
                        default: true
                      errorCode:
                        type: string
                        default: ""
                      errorMessage:
                        type: string
                        default: ""
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
  /v1/users/email/{email}:
    get:
      tags:
        - /v1/users
      summary: Returns a user by email.
      description: Return null data if no user has the email. Everyone can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userEmail"
      responses:
        "200":
          description: Return a JSON object of users if success true
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/usersResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
  /v1/users/username/{username}:
    get:
      tags:
        - /v1/users
      summary: Returns a user by username.
      description: Return null data if no user has the email. Everyone can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userUsername"
      responses:
        "200":
          description: Return a JSON object of users if success true
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/usersResponse"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
  /v1/users/username/{username}/posts:
    get:
      tags:
        - /v1/users
      summary: Returns a posts from user by username.
      description: Return null posts if no user or user doesn't have post yet. Everyone can use this endpoint.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userUsername"
      responses:
        "200":
          description: Return a JSON object of post if success true
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/postsArray"
                  - $ref: "#/components/schemas/errorResponse"
        "400":
          $ref: "#/components/responses/badrequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
components:
  parameters:
    categoryID:
      in: path
      name: id_category
      required: true
      schema:
        type: integer
        format: int64
        minLength: 1
    postID:
      in: path
      name: id_post
      required: true
      schema:
        type: integer
        format: int64
        minLength: 1
    postSlug:
      in: path
      name: slug
      required: true
      schema:
        type: integer
        format: int64
        minLength: 1
    tagID:
      in: path
      name: id_tag
      required: true
      schema:
        type: integer
        format: int64
        minLength: 1
    userID:
      in: path
      name: id_user
      required: true
      schema:
        type: integer
        format: int64
        minLength: 1
    userEmail:
      in: path
      name: email
      required: true
      schema:
        type: string
        minLength: 5
        maxLength: 320
    userUsername:
      in: path
      name: username
      required: true
      schema:
        type: string
        minLength: 6
        maxLength: 12
  requestBodies:
    posts:
      required: true
      description: JSON request body for create and update posts
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                minLength: 5
                maxLength: 20
              description:
                type: string
                minLength: 5
                maxLength: 50
              content:
                type: object
                format: JSON Stringfy
              cover:
                type: string
                format: url
              slug:
                type: string
                minLength: 5
                maxLength: 40
              categories:
                type: array
                description: array of id categories
                nullable: true
                items:
                    type: number
                    format: int64, unique
              tags:
                type: array
                description: array of id tags
                nullable: true
                items:
                    type: number
                    format: int64, unique
  responses:
    unauthorized:
      description: Response when user has invalid bearer token , e.g. expired token, invalid signature, invalid format
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorResponse"
    forbidden:
      description: Response when user's role doesn't allowed to use this endpoint
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorResponse"
    badrequest:
      description: Response when request params is not satisfied, e.g. validation error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorResponse"
  securitySchemes:
    bearerAuth:
      description: "Authorization bearer token"
      type: http
      bearerFormat: JWT
      scheme: bearer
  schemas:
    errorResponse:
      type: object
      properties:
        success:
          type: boolean
          default: false
        errorCode:
          type: string
        errorMessage:
          type: string
        data:
          type: object
          nullable: true
          default:
    successResponse:
      type: object
      properties:
        success:
          type: boolean
        errorCode:
          type: string
          default: ""
        errorMessage:
          type: string
          default: ""
        data:
          type: object
    users:
      type: object
      properties:
        id_user:
          type: number
          format: int64
        username:
          type: string
        name:
          type: string
        email:
          type: string
        city:
          type: string
        country:
          type: string
        birthday:
          type: string
          format: date RFC 3339
          pattern: YYYY-MM-DDT00:00:00Z
        web_profile:
          type: string
        photo_profile:
          type: string
          format: url
        activated:
          type: boolean
          default: false
    usersResponse:
      type: object
      properties:
        success:
          type: boolean
        errorCode:
          type: string
          default: ""
        errorMessage:
          type: string
          default: ""
        data:
          $ref: "#/components/schemas/users"
    usersArray:
      type: object
      properties:
        success:
          type: boolean
        errorCode:
          type: string
          default: ""
        errorMessage:
          type: string
          default: ""
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: "#/components/schemas/users"
    posts:
      type: object
      properties:
        id_post:
          type: number
          format: int64
        title:
          type: string
        description:
          type: string
        cover:
          type: string
          format: url
        slug:
          type: string
        categories:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/categories"
        tags:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/tags"
        id_user:
          type: number
          format: int64
        created_at:
          type: string
          description: RFC3339 datetime
          format: date-time
          example: "2021-08-21T00:00:00Z"
        updated_at:
          type: string
          description: RFC3339 datetime
          format: date-time
          example: "2021-08-21T00:00:00Z"
    postsArray:
      type: object
      properties:
        success:
          type: boolean
        errorCode:
          type: string
          default: ""
        errorMessage:
          type: string
          default: ""
        data:
          type: object
          properties:
            posts:
              type: array
              items:
                $ref: "#/components/schemas/posts"
    postsDetail:
      type: object
      properties:
        id_post:
          type: number
          format: int64
        title:
          type: string
        description:
          type: string
        content:
          type: object
        cover:
          type: string
          format: url
        slug:
          type: string
        categories:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/categories"
        tags:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/tags"
        id_user:
          type: number
          format: int64
        created_at:
          type: string
          description: RFC3339 datetime
          format: date-time
          example: "2021-08-21T00:00:00Z"
        updated_at:
          type: string
          description: RFC3339 datetime
          format: date-time
          example: "2021-08-21T00:00:00Z"
    postsDetailResponse:
      type: object
      properties:
        success:
          type: boolean
        errorCode:
          type: string
          default: ""
        errorMessage:
          type: string
          default: ""
        data:
          $ref: "#/components/schemas/postsDetail"
    categories:
      type: object
      properties:
        id_category:
          type: number
          format: int64
        category:
          type: string
    categoriesResponse:
      type: object
      properties:
        success:
          type: boolean
        errorCode:
          type: string
          default: ""
        errorMessage:
          type: string
          default: ""
        data:
          $ref: "#/components/schemas/categories"
    categoriesArray:
      type: object
      properties:
        success:
          type: boolean
        errorCode:
          type: string
          default: ""
        errorMessage:
          type: string
          default: ""
        data:
          type: object
          properties:
            categories:
              type: array
              items:
                $ref: "#/components/schemas/categories"
    tags:
      type: object
      properties:
        id_tag:
          type: number
          format: int64
        tag:
          type: string
    tagsResponse:
      type: object
      properties:
        success:
          type: boolean
        errorCode:
          type: string
          default: ""
        errorMessage:
          type: string
          default: ""
        data:
          $ref: "#/components/schemas/tags"
    tagsArray:
      type: object
      properties:
        success:
          type: boolean
        errorCode:
          type: string
          default: ""
        errorMessage:
          type: string
          default: ""
        data:
          type: object
          properties:
            tags:
              type: array
              items:
                $ref: "#/components/schemas/tags"
